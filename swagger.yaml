openapi: 3.0.0
info:
  title: Social Media API
  description: API for a simple social media application
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: Authentication
    description: User registration and login
  - name: Users
    description: User profile operations
  - name: Posts
    description: Posts and comments management

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
              required: [name, email, password]
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 5f8d0d55b54764421b7156c3
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: john@example.com
        "400":
          description: Missing required fields
        "409":
          description: Email already in use
        "500":
          description: Server error

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
              required: [email, password]
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 5f8d0d55b54764421b7156c3
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: john@example.com
        "400":
          description: Missing required fields
        "401":
          description: Invalid credentials
        "500":
          description: Server error

  # User endpoints
  /user/me:
    get:
      tags: [Users]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 5f8d0d55b54764421b7156c3
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: john@example.com
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Server error

  # Posts endpoints
  /posts:
    get:
      tags: [Posts]
      summary: Get all posts with comments
      responses:
        "200":
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "500":
          description: Failed to load posts

    post:
      tags: [Posts]
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: This is my first post!
              required: [content]
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Content is required
        "401":
          description: Unauthorized
        "500":
          description: Failed to create post

  /posts/{id}/comments:
    post:
      tags: [Posts]
      summary: Add a comment to a post
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Nice post!
              required: [content]
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Comment content is required
        "401":
          description: Unauthorized
        "404":
          description: Post not found
        "500":
          description: Failed to add comment

  /posts/{postId}/comments/{commentId}:
    delete:
      tags: [Posts]
      summary: Delete a comment
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: Post ID
        - name: commentId
          in: path
          required: true
          schema:
            type: string
          description: Comment ID
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Not authorized to delete this comment
        "404":
          description: Post or comment not found
        "500":
          description: Failed to delete comment

components:
  schemas:
    Post:
      type: object
      properties:
        _id:
          type: string
          example: 5f8d0d55b54764421b7156c3
        author:
          type: object
          properties:
            _id:
              type: string
              example: 5f8d0d55b54764421b7156c3
            name:
              type: string
              example: John Doe
        content:
          type: string
          example: This is my first post!
        comments:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 5f8d0d55b54764421b7156c4
              author:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5f8d0d55b54764421b7156c5
                  name:
                    type: string
                    example: Jane Doe
              content:
                type: string
                example: Nice post!
              createdAt:
                type: string
                format: date-time
                example: 2023-10-01T12:00:00Z
        createdAt:
          type: string
          format: date-time
          example: 2023-10-01T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-10-01T12:00:00Z

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
